{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Matt Parker's Maths Puzzles This is a repository of solution code for Matt Parker's Maths Puzzles . Written solutions, code explanations, proofs, etc., live here .","title":"Home"},{"location":"#matt-parkers-maths-puzzles","text":"This is a repository of solution code for Matt Parker's Maths Puzzles . Written solutions, code explanations, proofs, etc., live here .","title":"Matt Parker's Maths Puzzles"},{"location":"16/","text":"MPMP16: How Odd is Pascal's Triangle? MPMP Official Page http://www.think-maths.co.uk/pascaltriangle Generating Pascal's Triangle Before doing any work, I wanted a good way to generate Pascal's Triangle. After a few iterations, I settled on the following approach: import math (( math . comb ( i , j ) for j in range ( i + 1 )) for i in range ( d )) This approach uses the fact that each row of Pascal's Triangle is a list of the binomial coefficients for the following binomial: \\[(x + y)^i\\] Where \\(i\\) is the zero-indexed row of Pascal's Triangle. See the following diagram: \\[\\begin{matrix} i &&&&& \\\\ 0 &&&&& {0 \\choose 0} \\\\ 1 &&&& {1 \\choose 0} && {1 \\choose 1} \\\\ 2 &&& {2 \\choose 0} && {2 \\choose 1} && {2 \\choose 2} \\\\ 3 && {3 \\choose 0} && {3 \\choose 1} && {3 \\choose 2} && {3 \\choose 3} \\\\ 4 & {4 \\choose 0} && {4 \\choose 1} && {4 \\choose 2} && {4 \\choose 3} && {4 \\choose 4} \\\\ \\end{matrix}\\] Number of Numbers in Pascal's Triangle To figure out what percentage of numbers are odd, we need to know how many numbers total are in a Pascal's Triangle of a given height. Consider the length of each row. The first row has 1 number and each row has one more number than the one before it, giving the following series for calculating the total: \\[N = \\sum_{i = 1}^{m}{i}\\] There is a well-known formula for this kind of series: \\[N = \\frac{m(m + 1)}{2}\\] Naive Approach My first approach was just to count the number of odd numbers and divide by the total number of numbers, \\(N\\) : import itertools # Length of a list of... num_odd = len ( list ( # Generator of only odd numbers... filter ( lambda n : 2 % n == 1 , # From single iterator of all numbers in Pascal's triangle itertools . chain . from_iterable ( pascals_triangle )))) Here we use itertools 's chain function to flatten Pascal's Triangle into one big generator with every number in the triangle. We then use a filter to reduce to only odd numbers, convert to a list, and get the length of this list. I feel like there is a probably a more efficient way of doing this, but given I found a closed form equation for this number shortly after, I didn't bother finding one. From this, we get that 26.489825581395348% of numbers are odd. The full code can be found here . Sierpinski's Triangle For 128 rows the naive approach was pretty fast, but for larger numbers this approach gets slow very quickly. Additionally, this approach does not help us come up with any general statements about the oddness of Pascal's Triangle, so I wanted to find a more efficient method---ideally a formula. I started by trying to see if there was a pattern to the odds. I decided to just print the triangle, replacing evens with spaces and odds with asterisks: for row in pascals_triangle : for num in row : # If odd if num % 2 == 1 : print ( \"* \" , end = \"\" ) else : print ( \" \" , end = \"\" ) print () To my amazement, Sierpinski's Triangle appeared: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * I think I have actually seen this before, but I had forgotten, and it was satisfying to discover it for myself. Full code can be found here . Recurrence Relation I tried generating Sierpinski's Triangle at different sizes and noticed that sometimes the pattern was \"complete\" and sometimes it wasn't. Just for aesthetics, I tried to hone in on the depth of Pascal's Triangle that nicely encapsulated the largest triangle. I slowly incremented the depth from a starting point of 50 until it looked right and noticed the depth was 64\u2014a power of 2! I was pretty certain this wasn't a coincidence, so I tried other powers of 2 and they all produced nicely bounded snowflakes. It became apparent that the choice of 128 was not arbitrary. I decided to check several of the powers of 2 to see if a pattern in the way the triangle grew arose: \\(m = 2^0\\) : * \\(m = 2^1\\) : * * * \\(m = 2^2\\) : * * * * * * * * * \\(m = 2^3\\) : * * * * * * * * * * * * * * * * * * * * * * * * * * * \\(m = 2^4\\) : * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * I noticed that at each step, the pattern was the same as the previous pattern + 2 copies. From this, we can derive the following recurrence relation: \\[o_n = \\begin{cases} 1 & n = 0 \\\\ 3a_{n-1} & n > 0 \\end{cases}\\] Where \\(n\\) is the step number and \\(m = 2^n\\) , i.e., there are \\(2^n\\) rows at step \\(n\\) . This is a common form of recurrence relation with a known closed form: \\[o_n = 3^n\\] Mathematical induction could be used to prove that this is the case, but it is not need (and I did not have the time). This is getting us close to a formula for the percentage of odd numbers in Pascal's Triangle; however, we want it in terms of number of rows \\(m\\) and not in \\(n\\) . So we just solve the rows at a given step equation for \\(n\\) to get an expression in terms of \\(m\\) : \\[\\begin{align*} m &= 2^n \\\\ n &= \\log_2{m} \\end{align*}\\] Resulting in the following expression for the number of odd numbers in a Pascal's Triangle of \\(m\\) rows: \\[o_m = 3^{\\log_2{m}}\\] Closed Form Solution From the preceding work, we can come up with an elegant and efficient method of calculating the percentage of odd numbers in a Pascal's Triangle: \\[p = \\frac{o_m}{N} = \\frac{2(3^{\\log_2{m}})}{m(m + 1)}\\] Using this method, I obtained the same result as the naive approach: 26.489825581395348% . Full code can be found here Does the Percentage Approach a Value? To figure out the overall oddness of Pascal's Triangle, we should be able to just take the limit as the number of rows approaches infinity of our formula. Let \\(L\\) be the limit of \\(p\\) . \\[\\lim_{m\\to\\infty}{\\frac{2(3^{\\log_2{m}})}{m(m+1)}}\\] At first this seems like a tricky limit, but there is a simple trick that makes it simple: \\[\\begin{align*} 3^{\\log_2{m}} &= 3^{\\frac{\\log_3{m}}{\\log_3{2}}} \\\\ &= \\left(3^{\\log_3{m}}\\right)^{\\frac{1}{\\log_3{2}}} \\\\ &= m^{\\frac{\\log_2{3}}{\\log_2{2}}} \\\\ &= m^{\\frac{\\log_2{3}}{1}} \\\\ 3^{\\log_2{m}} &= m^{\\log_2{3}} \\end{align*}\\] This gives the following limit: \\[\\lim_{m\\to\\infty}{\\frac{2(m^{\\log_2{3}})}{m(m+1)}}\\] If we reformat in the following way, we can find the limit easily: \\[2\\cdot\\lim_{m\\to\\infty}{\\frac{m^{\\log_2{3}}}{m^2 + m}}\\] This becomes a simple polynomial rational expression where the highest order term on the top is \\(\\log_2{3}\\) and the highest oder term on the bottom is \\(2\\) . Since \\(2 > \\log_2{3}\\) , we know that the limit is equal to zero: \\[\\lim_{m\\to\\infty}{\\frac{2(3^{\\log_2{m}})}{m(m+1)}} = 0\\] In conclusion, the percentage of primes in Pascal's Triangle approaches zero. Further Work The formula is only applicable to rows that are powers of 2. For numbers of rows in-between, the number of odds is incorrect. Because of this, my conclusion may be off. Bonus: Counting Occurrences of a Number As a bonus I created a CLI for calculating the number of occurrences of a number in Pascal's Triangle. Full code can be found here","title":"MPMP16: How Odd is Pascal's Triangle?"},{"location":"16/#mpmp16-how-odd-is-pascals-triangle","text":"MPMP Official Page http://www.think-maths.co.uk/pascaltriangle","title":"MPMP16: How Odd is Pascal's Triangle?"},{"location":"16/#generating-pascals-triangle","text":"Before doing any work, I wanted a good way to generate Pascal's Triangle. After a few iterations, I settled on the following approach: import math (( math . comb ( i , j ) for j in range ( i + 1 )) for i in range ( d )) This approach uses the fact that each row of Pascal's Triangle is a list of the binomial coefficients for the following binomial: \\[(x + y)^i\\] Where \\(i\\) is the zero-indexed row of Pascal's Triangle. See the following diagram: \\[\\begin{matrix} i &&&&& \\\\ 0 &&&&& {0 \\choose 0} \\\\ 1 &&&& {1 \\choose 0} && {1 \\choose 1} \\\\ 2 &&& {2 \\choose 0} && {2 \\choose 1} && {2 \\choose 2} \\\\ 3 && {3 \\choose 0} && {3 \\choose 1} && {3 \\choose 2} && {3 \\choose 3} \\\\ 4 & {4 \\choose 0} && {4 \\choose 1} && {4 \\choose 2} && {4 \\choose 3} && {4 \\choose 4} \\\\ \\end{matrix}\\]","title":"Generating Pascal's Triangle"},{"location":"16/#number-of-numbers-in-pascals-triangle","text":"To figure out what percentage of numbers are odd, we need to know how many numbers total are in a Pascal's Triangle of a given height. Consider the length of each row. The first row has 1 number and each row has one more number than the one before it, giving the following series for calculating the total: \\[N = \\sum_{i = 1}^{m}{i}\\] There is a well-known formula for this kind of series: \\[N = \\frac{m(m + 1)}{2}\\]","title":"Number of Numbers in Pascal's Triangle"},{"location":"16/#naive-approach","text":"My first approach was just to count the number of odd numbers and divide by the total number of numbers, \\(N\\) : import itertools # Length of a list of... num_odd = len ( list ( # Generator of only odd numbers... filter ( lambda n : 2 % n == 1 , # From single iterator of all numbers in Pascal's triangle itertools . chain . from_iterable ( pascals_triangle )))) Here we use itertools 's chain function to flatten Pascal's Triangle into one big generator with every number in the triangle. We then use a filter to reduce to only odd numbers, convert to a list, and get the length of this list. I feel like there is a probably a more efficient way of doing this, but given I found a closed form equation for this number shortly after, I didn't bother finding one. From this, we get that 26.489825581395348% of numbers are odd. The full code can be found here .","title":"Naive Approach"},{"location":"16/#sierpinskis-triangle","text":"For 128 rows the naive approach was pretty fast, but for larger numbers this approach gets slow very quickly. Additionally, this approach does not help us come up with any general statements about the oddness of Pascal's Triangle, so I wanted to find a more efficient method---ideally a formula. I started by trying to see if there was a pattern to the odds. I decided to just print the triangle, replacing evens with spaces and odds with asterisks: for row in pascals_triangle : for num in row : # If odd if num % 2 == 1 : print ( \"* \" , end = \"\" ) else : print ( \" \" , end = \"\" ) print () To my amazement, Sierpinski's Triangle appeared: * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * I think I have actually seen this before, but I had forgotten, and it was satisfying to discover it for myself. Full code can be found here .","title":"Sierpinski's Triangle"},{"location":"16/#recurrence-relation","text":"I tried generating Sierpinski's Triangle at different sizes and noticed that sometimes the pattern was \"complete\" and sometimes it wasn't. Just for aesthetics, I tried to hone in on the depth of Pascal's Triangle that nicely encapsulated the largest triangle. I slowly incremented the depth from a starting point of 50 until it looked right and noticed the depth was 64\u2014a power of 2! I was pretty certain this wasn't a coincidence, so I tried other powers of 2 and they all produced nicely bounded snowflakes. It became apparent that the choice of 128 was not arbitrary. I decided to check several of the powers of 2 to see if a pattern in the way the triangle grew arose: \\(m = 2^0\\) : * \\(m = 2^1\\) : * * * \\(m = 2^2\\) : * * * * * * * * * \\(m = 2^3\\) : * * * * * * * * * * * * * * * * * * * * * * * * * * * \\(m = 2^4\\) : * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * I noticed that at each step, the pattern was the same as the previous pattern + 2 copies. From this, we can derive the following recurrence relation: \\[o_n = \\begin{cases} 1 & n = 0 \\\\ 3a_{n-1} & n > 0 \\end{cases}\\] Where \\(n\\) is the step number and \\(m = 2^n\\) , i.e., there are \\(2^n\\) rows at step \\(n\\) . This is a common form of recurrence relation with a known closed form: \\[o_n = 3^n\\] Mathematical induction could be used to prove that this is the case, but it is not need (and I did not have the time). This is getting us close to a formula for the percentage of odd numbers in Pascal's Triangle; however, we want it in terms of number of rows \\(m\\) and not in \\(n\\) . So we just solve the rows at a given step equation for \\(n\\) to get an expression in terms of \\(m\\) : \\[\\begin{align*} m &= 2^n \\\\ n &= \\log_2{m} \\end{align*}\\] Resulting in the following expression for the number of odd numbers in a Pascal's Triangle of \\(m\\) rows: \\[o_m = 3^{\\log_2{m}}\\]","title":"Recurrence Relation"},{"location":"16/#closed-form-solution","text":"From the preceding work, we can come up with an elegant and efficient method of calculating the percentage of odd numbers in a Pascal's Triangle: \\[p = \\frac{o_m}{N} = \\frac{2(3^{\\log_2{m}})}{m(m + 1)}\\] Using this method, I obtained the same result as the naive approach: 26.489825581395348% . Full code can be found here","title":"Closed Form Solution"},{"location":"16/#does-the-percentage-approach-a-value","text":"To figure out the overall oddness of Pascal's Triangle, we should be able to just take the limit as the number of rows approaches infinity of our formula. Let \\(L\\) be the limit of \\(p\\) . \\[\\lim_{m\\to\\infty}{\\frac{2(3^{\\log_2{m}})}{m(m+1)}}\\] At first this seems like a tricky limit, but there is a simple trick that makes it simple: \\[\\begin{align*} 3^{\\log_2{m}} &= 3^{\\frac{\\log_3{m}}{\\log_3{2}}} \\\\ &= \\left(3^{\\log_3{m}}\\right)^{\\frac{1}{\\log_3{2}}} \\\\ &= m^{\\frac{\\log_2{3}}{\\log_2{2}}} \\\\ &= m^{\\frac{\\log_2{3}}{1}} \\\\ 3^{\\log_2{m}} &= m^{\\log_2{3}} \\end{align*}\\] This gives the following limit: \\[\\lim_{m\\to\\infty}{\\frac{2(m^{\\log_2{3}})}{m(m+1)}}\\] If we reformat in the following way, we can find the limit easily: \\[2\\cdot\\lim_{m\\to\\infty}{\\frac{m^{\\log_2{3}}}{m^2 + m}}\\] This becomes a simple polynomial rational expression where the highest order term on the top is \\(\\log_2{3}\\) and the highest oder term on the bottom is \\(2\\) . Since \\(2 > \\log_2{3}\\) , we know that the limit is equal to zero: \\[\\lim_{m\\to\\infty}{\\frac{2(3^{\\log_2{m}})}{m(m+1)}} = 0\\] In conclusion, the percentage of primes in Pascal's Triangle approaches zero.","title":"Does the Percentage Approach a Value?"},{"location":"16/#further-work","text":"The formula is only applicable to rows that are powers of 2. For numbers of rows in-between, the number of odds is incorrect. Because of this, my conclusion may be off.","title":"Further Work"},{"location":"16/#bonus-counting-occurrences-of-a-number","text":"As a bonus I created a CLI for calculating the number of occurrences of a number in Pascal's Triangle. Full code can be found here","title":"Bonus: Counting Occurrences of a Number"}]}